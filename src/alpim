#!/usr/bin/env bash

set -euo pipefail

APP_NAME="alpi"
SCRIPT_NAME="alpim"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

VERSION="1.0.0"
BIN_DIR="/usr/local/bin"
CLI_DIR="/usr/local/share"
INSTALL_DIR="$CLI_DIR/$APP_NAME-cli"
FILE_PATH="$INSTALL_DIR/$APP_NAME"
LOG_FILE="$SCRIPT_DIR/alpimLogs"
REPO="https://gitlab.com/ibnqhader/alpi/-/raw/main/src/$APP_NAME"

YEAR="2025"
AUTHOR="ibnqhader"
LICENCE="
$SCRIPT_NAME is a management script for $APP_NAME!\n
Copyright (C) $YEAR $AUTHOR\n
\n
This program is free software: you can redistribute it and/or modify\n
it under the terms of the GNU Affero General Public License as published\n
by the Free Software Foundation, either version 3 of the License, or\n
(at your option) any later version.\n
\n
This program is distributed in the hope that it will be useful,\n
but WITHOUT ANY WARRANTY; without even the implied warranty of\n
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
GNU Affero General Public License for more details.\n
\n
You should have received a copy of the GNU Affero General Public License\n
along with this program.  If not, see https://www.gnu.org/licenses.\n
"

log() {
	echo -e "\033[1;34m[INFO]\033[0m $*" | sudo tee -a "$LOG_FILE"
}

eror() {
	echo -e "\033[1;31m[EROR]\033[0m \033[1m$*\033[0m" | sudo tee -a "$LOG_FILE"
}

warn() {
	echo -e "\033[1;33m[WARN]\033[0m $*" | sudo tee -a "$LOG_FILE"
}

sucs() {
	echo -e "\033[1;32m[SUCS]\033[0m $*" | sudo tee -a "$LOG_FILE"
}

infoe() {
	echo -e "\033[1;34m[INFO]\033[0m $*"
}

erore() {
	echo -e "\033[1;31m[EROR]\033[0m $*"
}

version() {
	grep -E '^VERSION=' "$1" | cut -d'"' -f2
}

show_licence() {
	echo -e $LICENCE
	exit 0
}

local_version() {
	if [ ! -f "$FILE_PATH" ]; then
		warn "$APP_NAME is not installed. Run '$SCRIPT_NAME install'"
		exit 1
	else
		log "Installed version $(version $FILE_PATH)"
		exit 0
	fi
}

download() {
	TMP=$(mktemp)
	curl -fsSL "$REPO" -o "$TMP" || {
		eror "Failed to download $APP_NAME from $REPO"
		exit 1
	}
	echo "$TMP"
}

app() {
	TMP="$1"
	sudo mkdir -p "$INSTALL_DIR"
	sudo cp "$TMP" "$FILE_PATH"
	sudo chmod +x "$FILE_PATH"
	sudo chmod a-w "$FILE_PATH"
	sudo ln -sf "$FILE_PATH" "$BIN_DIR"
	rm -f "$TMP"
}

install() {
	log "Installing $APP_NAME..."

	if [ -f "$FILE_PATH" ]; then
		warn "$APP_NAME is already installed. Run '$SCRIPT_NAME update'."
		exit 1
	fi

	TMP=$(download)
	app $TMP

	sucs "Installed: $APP_NAME"
	log "You can now run: $APP_NAME"
}

update() {
	log "Checking for updates..."

	if [ ! -f "$FILE_PATH" ]; then
		warn "$APP_NAME is not installed. Run '$SCRIPT_NAME install' first."
		exit 1
	fi

	LOCAL=$(version "$FILE_PATH")
	TMP=$(download)
	REMOTE=$(version "$TMP")

	log "Installed version: $LOCAL"
	log "Remote version: $REMOTE"

	if [ "$LOCAL" == "$REMOTE" ]; then
		log "$APP_NAME is already up-to-date."
		rm -f "$TMP"
		exit 0
	fi

	log "Updating $APP_NAME to version $REMOTE..."
	app $TMP
	sucs "Updated to version $REMOTE"
}

remove() {
	infoe "Removing $APP_NAME..."
	if [ -f "$FILE_PATH" ]; then
		sudo rm -f "$FILE_PATH"
		sudo rm -f "$BIN_DIR/$APP_NAME"
		infoe "Removed $APP_NAME"
		exit 0
	else
		erore "$INSTALL_DIR is not installed."
		exit 1
	fi
}

force() {
	infoe "Removing $APP_NAME..."
	if [ -d "$INSTALL_DIR" ]; then
		sudo rm -rf "$INSTALL_DIR"
		sudo rm -f "$BIN_DIR/$APP_NAME"
		sudo rm -f "$BIN_DIR/$SCRIPT_NAME"
		infoe "Removed $INSTALL_DIR"
		exit 0
	else
		erore "$INSTALL_DIR is not available."
		exit 1
	fi
}

usage() {
	infoe "\033[1m$SCRIPT_NAME [ install ] [ update ] [ remove ] [ force ] [ version ]\033[0m "
	echo ""
	echo "  install      Installs the app"
	echo "  update       Check for updates and install new version"
	echo "  remove       Removes the app"
	echo "  force        Removes the complete app directory"
	echo "  version      Shows the installed version"
	echo ""
	exit 1
}

require_sudo() {
	if [[ $EUID -ne 0 ]]; then
		if ! command -v sudo &>/dev/null; then
			eror "This script needs to be run as root or have sudo installed."
			exit 1
		fi
	fi
}

ensure_sudo() {
	if ! sudo -n true 2>/dev/null; then
		sudo -v
		log "Sudo credentials cached."
	fi
}

parse() {
	ensure_sudo
	while [[ $# -gt 0 ]]; do
		case "$1" in
			install)
				install
				;;
			update)
				update
				;;
			remove)
				remove
				;;
			force)
				force
				;;
			version)
				local_version
				;;
			licence)
				show_licence
				;;
			*)
				eror "Unknown option: $1"
				usage
				;;
		esac
	done
}

main() {
	parse "$@"
	require_sudo
	usage
}

main "$@"
